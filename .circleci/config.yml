# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.6.1

    working_directory: ~/repo

    steps:
      - checkout
      - run:
          name: Set ENV
          command: |
            echo "export GNS3_VERSION=\"${CIRCLE_TAG:-"v2.1.0b2"}\"" >> env_vars
            echo "export GNS3_NUMBER=\`echo \$GNS3_VERSION | sed \"s/^v//\"\`" >> env_vars
#      - run:
#          name: Install dependencies
#          command: |
#            python3 -m venv env
#            source env/bin/activate
#            pip install packet-python
#      - run:
#          name: Get builder device
#          command: |
#            source env/bin/activate
#            DEVICE_IP=`python3 .circleci/device.py ${PACKET_TOKEN} get`
#            echo "export DEVICE_IP=\"$DEVICE_IP\"" >> env_vars
#            echo "Obtained device on $DEVICE_IP"
#            ssh-keyscan -H ${DEVICE_IP} >> ~/.ssh/known_hosts
#      - run:
#          name: Install VirtualBox
#          command: |
#            source env_vars
#            ssh root@${DEVICE_IP} "
#              set -e
#              apt update
#              apt -y install linux-headers-\$(uname -r) zip unzip git
#              apt-add-repository \"deb http://download.virtualbox.org/virtualbox/debian \$(lsb_release -sc) contrib\"
#              wget -q -O- http://download.virtualbox.org/virtualbox/debian/oracle_vbox_2016.asc | apt-key add -
#              apt update
#              apt -y install virtualbox-5.1 dkms
#            "
#      - run:
#          name: Install VMWare
#          command: |
#            source env_vars
#            echo "
#              set -e
#
#              add-apt-repository -y ppa:ubuntu-toolchain-r/test
#              apt-get update
#              apt-get -y install gcc-6 g++-6
#              update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 60
#
#              if [ ! -f "/tmp/VMWare.bundle" ]
#              then
#                wget https://www.vmware.com/go/tryworkstation-linux-64 -O /tmp/VMWare.bundle
#              fi
#
#              chmod a+x /tmp/VMWare.bundle
#              /tmp/VMWare.bundle --eulas-agreed --required --console
#              /usr/lib/vmware/bin/vmware-vmx --new-sn ${VMWARE_SERIAL}
#              /etc/init.d/vmware restart
#            " > script.sh
#            scp script.sh root@${DEVICE_IP}:
#            ssh root@${DEVICE_IP} "bash script.sh"
#
#      - run:
#          name: Install Packer
#          command: |
#            source env_vars
#            ssh root@${DEVICE_IP} "
#              set -e
#
#              if [ ! -f "/tmp/packer.zip" ]
#              then
#                wget https://releases.hashicorp.com/packer/1.0.4/packer_1.0.4_linux_amd64.zip -O /tmp/packer.zip
#              fi
#
#              unzip -o /tmp/packer.zip -d /usr/local/bin/
#            "
#      - run:
#          name: Clone repository on device
#          command: |
#            source env_vars
#            ssh root@${DEVICE_IP} "
#              set -e
#              if [ ! -d "~/gns3-vm" ]
#              then
#                git clone https://github.com/GNS3/gns3-vm.git
#              fi
#            "
#      - run:
#          name: Release VirtualBox VM
#          command: |
#            source env_vars
#            ssh root@${DEVICE_IP} "
#              set -e
#
#              cd gns3-vm
#
#              if [ ! -e \"GNS3 VM VirtualBox ${GNS3_NUMBER}.zip\" ];
#              then
#                ./release_virtualbox.sh ${GNS3_VERSION}
#              fi
#            "
#      - run:
#          name: Release VMWare VM
#          command: |
#            source env_vars
#            ssh root@${DEVICE_IP} "
#              set -e
#
#              cd gns3-vm
#
#              if [ ! -e \"GNS3 VM VMware Workstation ${GNS3_NUMBER}.zip\" ];
#              then
#                ./release_vmware.sh ${GNS3_VERSION}
#              fi
#            "
#      - run:
#          name: Release VMWare ESXI VM
#          command: |
#            source env_vars
#            ssh root@${DEVICE_IP} "
#              set -e
#
#              cd gns3-vm
#
#              cp \"GNS3 VM VMware Workstation ${GNS3_NUMBER}.zip\" /tmp/GNS3VM.VMware.${GNS3_NUMBER}.zip
#
#              if [ ! -e \"GNS3 VM VMware ESXI ${GNS3_NUMBER}.zip\" ];
#              then
#                ./release_vmware_esxi.sh ${GNS3_VERSION}
#              fi
#            "
#      - run:
#          name: Gather arifacts from device
#          command: |
#            source env_vars
#            mkdir artifacts
#            scp root@${DEVICE_IP}:"gns3-vm/GNS3\ VM\ *.zip" artifacts
#      - run:
#          name: Destroy device
##          when: always
#          command: |
#            source env/bin/activate
#            python3 .circleci/device.py ${PACKET_TOKEN} destroy
      - deploy:
          name: Deploying on Github
          command: |
            source env/bin/activate
            echo "Deploying version: ${CIRCLE_TAG}"
            git clone git@github.com:GNS3/gns3-build.git
            cd gns3-build
            pip3 install -r requirements.txt
            cd ..
            python3 gns3-build/upload.py ${CIRCLE_TAG} artifacts/*.zip
      - store_artifacts:
          path: artifacts
          destination: artifacts


workflows:
  version: 2
  build_only_on_tag:
    jobs:
      - build:
          filters:
            tags:
              only: /v.*/
            branches:
              ignore: /.*/
